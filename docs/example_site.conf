server {
    listen      80;
    server_name mywebsite.localhost;

    #Stuff needed to make it work. This setup uses a Public Client.
    set $oidc_client_id f16fae7c-3e7e-442d-a065-0594054b59cb;
    set $oidc_discovery_url https://oidc.localhost/.well-known/openid-configuration;

    location / {
        # This is how it authenticates. Using the 401 to redirect to a login page.
        auth_request /auth/oidc/verify;
        auth_request_set $auth_context $upstream_http_x_auth_context;
        error_page 401 = @oidc_login;

        #Regular website stuff
        proxy_pass http://localhost:5001;
    }

    # This is the redirect rule. We need to share the auth_context and the redirect_uri back as cookies.
    location @oidc_login {         
        add_header Set-Cookie "redirect_to=$request_uri; Path=/auth/pocketid/; HttpOnly; Max-Age=300";
        add_header Set-Cookie "auth_context=$auth_context; Path=/auth/pocketid/; HttpOnly; Max-Age=300";
        return 302 /auth/oidc/login;
    }

    # This is the Proxy Pass to the Auth server
    location /auth/oidc/ {
        proxy_pass http://localhost:3600/; # Manually set this. NGINX does variables "differently" than hardcoded values https://stackoverflow.com/a/71224059
        proxy_set_header Host $host;
        proxy_set_header X-OIDC-Client-Id $oidc_client_id;
        proxy_set_header X-OIDC-Discovery-Url $oidc_discovery_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}